import type { NextPage } from 'next';
import Head from 'next/head';
import { FormEvent, useCallback, useRef, useState } from 'react';
import { trpc } from '../utils/trpc';
import { SearchResponse } from '../server/trpc/router/search';

const Home: NextPage = () => {
	const [answers, setAnswers] = useState<SearchResponse['answers']>([]);
	const searchMutation = trpc.search.stackoverflow.useMutation();

	const searchRef = useRef<HTMLInputElement>(null);

	const onFormSubmit = useCallback(async (e: FormEvent) => {
		e.preventDefault();
		if (!searchRef.current) return;
		const { answers } = await searchMutation.mutateAsync({
			searchTerm: searchRef.current.value,
		});
		setAnswers(answers);
	}, []);

	return (
		<>
			<Head>
				<title>Create T3 App</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<main className="container mx-auto flex min-h-screen flex-col gap-2 p-4">
				<form onSubmit={onFormSubmit} className="flex gap-2">
					<input
						type="text"
						placeholder="Search..."
						className="border-2 border-gray-400 px-2"
						ref={searchRef}
					/>
					<button
						type="submit"
						className="border-1 rounded-2xl bg-[#83A5FF] px-4 py-2 text-white"
					>
						Submit
					</button>
				</form>

				<table className="table-auto border-separate border-spacing-2 border border-slate-400">
					<thead>
						<tr>
							<th>question_id</th>
							<th>answer_id</th>
							<th>is_accepted</th>
							<th>similarity_score</th>
							<th>link</th>
						</tr>
					</thead>

					<tbody>
						{answers.map(answer => (
							<tr key={answer.answer_id}>
								<th>{answer.question_id}</th>
								<th>{answer.answer_id}</th>
								<th>{`${answer.is_accepted}`}</th>
								<th>{answer.similarity_score}</th>
								<th>{answer.link}</th>
							</tr>
						))}
					</tbody>
				</table>
			</main>
		</>
	);
};

export default Home;
